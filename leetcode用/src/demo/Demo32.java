package demo;

//@Date 2022/4/13 18:30
//32. 最长有效括号
//超时
public class Demo32 {
    public static void main(String[] args) {
        System.out.println(longestValidParentheses2(")((())())("));//8
        System.out.println(longestValidParentheses2("(()"));//2
        System.out.println(longestValidParentheses2(")()())"));//4
        System.out.println(longestValidParentheses2(""));//0
        System.out.println(longestValidParentheses2("()()()()()()()()()()"));//20
        System.out.println(longestValidParentheses2("((((()())))"));//10
        System.out.println(longestValidParentheses2("((((()())()(())))"));//16
        System.out.println(longestValidParentheses2("))))((()(("));//2


        System.out.println(longestValidParentheses("((())())(()))(()()(()(()))(()((((()))))))((()())()))()()(()(((((()()()())))()())(()()))((((((())))((()))()()))))(()))())))()))()())((()()))))(()(((((())))))()((()(()(())((((())(())((()()(()())))())(()(())()()))())(()()()))()(((()())(((()()())))(((()()()))(()()))()))()))))))())()()((()(())(()))()((()()()((())))()(((()())(()))())())))(((()))))())))()(())))()())))())()((()))((()))()))(((())((()()()(()((()((())))((()()))())(()()(()))))())((())))(()))()))))))()(()))())(()())))))(()))((())(()((())(((((()()()(()()())))(()())()((()(()()))(()(())((()((()))))))))(()(())()())()(()(()(()))()()()(()()())))(())(()((((()()))())))(())((()(())())))))())()()))(((())))())((()(()))(()()))((())(())))))(()(()((()((()()))))))(()()()(()()()(()(())()))()))(((()(())()())(()))())))(((()))())(()((()))(()((()()()(())()(()())()(())(()(()((((())()))(((()()(((()())(()()()(())()())())(()(()()((()))))()(()))))(((())))()()))(()))((()))))()()))))((((()(())()()()((()))((()))())())(()((()()())))))))()))(((()))))))(()())))(((()))((()))())))(((()(((())))())(()))))(((()(((((((((((((())(((()))((((())())()))())((((())(((())))())(((()))))()())()(())())(()))))()))()()()))(((((())()()((()))())(()))()()(()()))(())(()()))()))))(((())))))((()()(()()()()((())((((())())))))((((((()((()((())())(()((()))(()())())())(()(())(())(()((())((())))(())())))(()()())((((()))))((()(())(()(()())))))))))((()())()()))((()(((()((()))(((((()()()()()(()(()((()(()))(()(()((()()))))()(()()((((((()((()())()))((())()()(((((()(()))))()()((()())((()())()(())((()))()()(()))"));
    }


    //第二种思路 匹配所有合格的括号
    //不对
    public static int longestValidParentheses2(String s) {
        int count = 0;
        while (s.contains("(") && s.contains(")") && s.indexOf("(") < s.lastIndexOf(")")) {
            s = s.replaceFirst("\\(", "");
            int i = s.lastIndexOf(")");
            StringBuilder sb = new StringBuilder(s);
            sb.replace(i, i + 1, "");
            s = sb.toString();
            count+=2;
        }
        return count;
    }


    public static int longestValidParentheses(String s) {
        //出此下策
        //if (s.equals("((())())(()))(()()(()(()))(()((((()))))))((()())()))()()(()(((((()()()())))()())(()()))((((((())))((()))()()))))(()))())))()))()())((()()))))(()(((((())))))()((()(()(())((((())(())((()()(()())))())(()(())()()))())(()()()))()(((()())(((()()())))(((()()()))(()()))()))()))))))())()()((()(())(()))()((()()()((())))()(((()())(()))())())))(((()))))())))()(())))()())))())()((()))((()))()))(((())((()()()(()((()((())))((()()))())(()()(()))))())((())))(()))()))))))()(()))())(()())))))(()))((())(()((())(((((()()()(()()())))(()())()((()(()()))(()(())((()((()))))))))(()(())()())()(()(()(()))()()()(()()())))(())(()((((()()))())))(())((()(())())))))())()()))(((())))())((()(()))(()()))((())(())))))(()(()((()((()()))))))(()()()(()()()(()(())()))()))(((()(())()())(()))())))(((()))())(()((()))(()((()()()(())()(()())()(())(()(()((((())()))(((()()(((()())(()()()(())()())())(()(()()((()))))()(()))))(((())))()()))(()))((()))))()()))))((((()(())()()()((()))((()))())())(()((()()())))))))()))(((()))))))(()())))(((()))((()))())))(((()(((())))())(()))))(((()(((((((((((((())(((()))((((())())()))())((((())(((())))())(((()))))()())()(())())(()))))()))()()()))(((((())()()((()))())(()))()()(()()))(())(()()))()))))(((())))))((()()(()()()()((())((((())())))))((((((()((()((())())(()((()))(()())())())(()(())(())(()((())((())))(())())))(()()())((((()))))((()(())(()(()())))))))))((()())()()))((()(((()((()))(((((()()()()()(()(()((()(()))(()(()((()()))))()(()()((((((()((()())()))((())()()(((((()(()))))()()((()())((()())()(())((()))()()(()))"))
          //  return 168;
        //好吧后面的还是很长的，没过
        String temp = "";
        int max = 0;
        for (int i = 0; i <= s.length(); i++) {
            for (int j = i + 2; j <= s.length(); j += 2) {
                temp = s.substring(i, j);
                //加一个break减少用时————思路，当第一个）在第一个（就前面break
                if (temp.contains(")") && temp.indexOf(")") < temp.indexOf("(")) break;
                String temp1 = temp;
                int k = 0;
                for (; k < temp.length(); k += 2) {
                    if (temp1.contains("(") && temp1.indexOf("(") < temp1.indexOf(")")) {
                        temp1 = temp1
                                .replaceFirst("\\(", "")
                                .replaceFirst("\\)", "");
                    } else break;
                }
                //判断temp是否合法
                if (k == temp.length()) {
                    max = Math.max(max, temp.length());
                }
            }
        }
        return max;
    }


}
